// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class YToken extends ethereum.SmartContract {
  static bind(address: Address): YToken {
    return new YToken("YToken", address);
  }

  aave(): Address {
    let result = super.call("aave", "aave():(address)", []);

    return result[0].toAddress();
  }

  try_aave(): ethereum.CallResult<Address> {
    let result = super.tryCall("aave", "aave():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aavePool(): Address {
    let result = super.call("aavePool", "aavePool():(address)", []);

    return result[0].toAddress();
  }

  try_aavePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("aavePool", "aavePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveToken(): Address {
    let result = super.call("aaveToken", "aaveToken():(address)", []);

    return result[0].toAddress();
  }

  try_aaveToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveToken", "aaveToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  apr(): Address {
    let result = super.call("apr", "apr():(address)", []);

    return result[0].toAddress();
  }

  try_apr(): ethereum.CallResult<Address> {
    let result = super.tryCall("apr", "apr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceAave(): BigInt {
    let result = super.call("balanceAave", "balanceAave():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceAave(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceAave", "balanceAave():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceAaveAvailable(): BigInt {
    let result = super.call(
      "balanceAaveAvailable",
      "balanceAaveAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceAaveAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAaveAvailable",
      "balanceAaveAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceCompound(): BigInt {
    let result = super.call(
      "balanceCompound",
      "balanceCompound():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceCompound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceCompound",
      "balanceCompound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceCompoundInToken(): BigInt {
    let result = super.call(
      "balanceCompoundInToken",
      "balanceCompoundInToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceCompoundInToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceCompoundInToken",
      "balanceCompoundInToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceDydx(): BigInt {
    let result = super.call("balanceDydx", "balanceDydx():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceDydx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceDydx", "balanceDydx():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceDydxAvailable(): BigInt {
    let result = super.call(
      "balanceDydxAvailable",
      "balanceDydxAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceDydxAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceDydxAvailable",
      "balanceDydxAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceFulcrum(): BigInt {
    let result = super.call("balanceFulcrum", "balanceFulcrum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceFulcrum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceFulcrum",
      "balanceFulcrum():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceFulcrumAvailable(): BigInt {
    let result = super.call(
      "balanceFulcrumAvailable",
      "balanceFulcrumAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceFulcrumAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceFulcrumAvailable",
      "balanceFulcrumAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceFulcrumInToken(): BigInt {
    let result = super.call(
      "balanceFulcrumInToken",
      "balanceFulcrumInToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceFulcrumInToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceFulcrumInToken",
      "balanceFulcrumInToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcPoolValueInToken(): BigInt {
    let result = super.call(
      "calcPoolValueInToken",
      "calcPoolValueInToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calcPoolValueInToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcPoolValueInToken",
      "calcPoolValueInToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  compound(): Address {
    let result = super.call("compound", "compound():(address)", []);

    return result[0].toAddress();
  }

  try_compound(): ethereum.CallResult<Address> {
    let result = super.tryCall("compound", "compound():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dToken(): BigInt {
    let result = super.call("dToken", "dToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dToken", "dToken():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dydx(): Address {
    let result = super.call("dydx", "dydx():(address)", []);

    return result[0].toAddress();
  }

  try_dydx(): ethereum.CallResult<Address> {
    let result = super.tryCall("dydx", "dydx():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fulcrum(): Address {
    let result = super.call("fulcrum", "fulcrum():(address)", []);

    return result[0].toAddress();
  }

  try_fulcrum(): ethereum.CallResult<Address> {
    let result = super.tryCall("fulcrum", "fulcrum():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAave(): Address {
    let result = super.call("getAave", "getAave():(address)", []);

    return result[0].toAddress();
  }

  try_getAave(): ethereum.CallResult<Address> {
    let result = super.tryCall("getAave", "getAave():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAaveCore(): Address {
    let result = super.call("getAaveCore", "getAaveCore():(address)", []);

    return result[0].toAddress();
  }

  try_getAaveCore(): ethereum.CallResult<Address> {
    let result = super.tryCall("getAaveCore", "getAaveCore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPricePerFullShare(): BigInt {
    let result = super.call(
      "getPricePerFullShare",
      "getPricePerFullShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPricePerFullShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPricePerFullShare",
      "getPricePerFullShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): BigInt {
    let result = super.call("pool", "pool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pool", "pool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  provider(): i32 {
    let result = super.call("provider", "provider():(uint8)", []);

    return result[0].toI32();
  }

  try_provider(): ethereum.CallResult<i32> {
    let result = super.tryCall("provider", "provider():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  recommend(): i32 {
    let result = super.call("recommend", "recommend():(uint8)", []);

    return result[0].toI32();
  }

  try_recommend(): ethereum.CallResult<i32> {
    let result = super.tryCall("recommend", "recommend():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveTokenCall extends ethereum.Call {
  get inputs(): ApproveTokenCall__Inputs {
    return new ApproveTokenCall__Inputs(this);
  }

  get outputs(): ApproveTokenCall__Outputs {
    return new ApproveTokenCall__Outputs(this);
  }
}

export class ApproveTokenCall__Inputs {
  _call: ApproveTokenCall;

  constructor(call: ApproveTokenCall) {
    this._call = call;
  }
}

export class ApproveTokenCall__Outputs {
  _call: ApproveTokenCall;

  constructor(call: ApproveTokenCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class Set_new_AAVECall extends ethereum.Call {
  get inputs(): Set_new_AAVECall__Inputs {
    return new Set_new_AAVECall__Inputs(this);
  }

  get outputs(): Set_new_AAVECall__Outputs {
    return new Set_new_AAVECall__Outputs(this);
  }
}

export class Set_new_AAVECall__Inputs {
  _call: Set_new_AAVECall;

  constructor(call: Set_new_AAVECall) {
    this._call = call;
  }

  get _new_AAVE(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_AAVECall__Outputs {
  _call: Set_new_AAVECall;

  constructor(call: Set_new_AAVECall) {
    this._call = call;
  }
}

export class Set_new_APRCall extends ethereum.Call {
  get inputs(): Set_new_APRCall__Inputs {
    return new Set_new_APRCall__Inputs(this);
  }

  get outputs(): Set_new_APRCall__Outputs {
    return new Set_new_APRCall__Outputs(this);
  }
}

export class Set_new_APRCall__Inputs {
  _call: Set_new_APRCall;

  constructor(call: Set_new_APRCall) {
    this._call = call;
  }

  get _new_APR(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_APRCall__Outputs {
  _call: Set_new_APRCall;

  constructor(call: Set_new_APRCall) {
    this._call = call;
  }
}

export class Set_new_ATOKENCall extends ethereum.Call {
  get inputs(): Set_new_ATOKENCall__Inputs {
    return new Set_new_ATOKENCall__Inputs(this);
  }

  get outputs(): Set_new_ATOKENCall__Outputs {
    return new Set_new_ATOKENCall__Outputs(this);
  }
}

export class Set_new_ATOKENCall__Inputs {
  _call: Set_new_ATOKENCall;

  constructor(call: Set_new_ATOKENCall) {
    this._call = call;
  }

  get _new_ATOKEN(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_ATOKENCall__Outputs {
  _call: Set_new_ATOKENCall;

  constructor(call: Set_new_ATOKENCall) {
    this._call = call;
  }
}

export class Set_new_COMPOUNDCall extends ethereum.Call {
  get inputs(): Set_new_COMPOUNDCall__Inputs {
    return new Set_new_COMPOUNDCall__Inputs(this);
  }

  get outputs(): Set_new_COMPOUNDCall__Outputs {
    return new Set_new_COMPOUNDCall__Outputs(this);
  }
}

export class Set_new_COMPOUNDCall__Inputs {
  _call: Set_new_COMPOUNDCall;

  constructor(call: Set_new_COMPOUNDCall) {
    this._call = call;
  }

  get _new_COMPOUND(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_COMPOUNDCall__Outputs {
  _call: Set_new_COMPOUNDCall;

  constructor(call: Set_new_COMPOUNDCall) {
    this._call = call;
  }
}

export class Set_new_DTOKENCall extends ethereum.Call {
  get inputs(): Set_new_DTOKENCall__Inputs {
    return new Set_new_DTOKENCall__Inputs(this);
  }

  get outputs(): Set_new_DTOKENCall__Outputs {
    return new Set_new_DTOKENCall__Outputs(this);
  }
}

export class Set_new_DTOKENCall__Inputs {
  _call: Set_new_DTOKENCall;

  constructor(call: Set_new_DTOKENCall) {
    this._call = call;
  }

  get _new_DTOKEN(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Set_new_DTOKENCall__Outputs {
  _call: Set_new_DTOKENCall;

  constructor(call: Set_new_DTOKENCall) {
    this._call = call;
  }
}

export class Set_new_FULCRUMCall extends ethereum.Call {
  get inputs(): Set_new_FULCRUMCall__Inputs {
    return new Set_new_FULCRUMCall__Inputs(this);
  }

  get outputs(): Set_new_FULCRUMCall__Outputs {
    return new Set_new_FULCRUMCall__Outputs(this);
  }
}

export class Set_new_FULCRUMCall__Inputs {
  _call: Set_new_FULCRUMCall;

  constructor(call: Set_new_FULCRUMCall) {
    this._call = call;
  }

  get _new_FULCRUM(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Set_new_FULCRUMCall__Outputs {
  _call: Set_new_FULCRUMCall;

  constructor(call: Set_new_FULCRUMCall) {
    this._call = call;
  }
}

export class SupplyAaveCall extends ethereum.Call {
  get inputs(): SupplyAaveCall__Inputs {
    return new SupplyAaveCall__Inputs(this);
  }

  get outputs(): SupplyAaveCall__Outputs {
    return new SupplyAaveCall__Outputs(this);
  }
}

export class SupplyAaveCall__Inputs {
  _call: SupplyAaveCall;

  constructor(call: SupplyAaveCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyAaveCall__Outputs {
  _call: SupplyAaveCall;

  constructor(call: SupplyAaveCall) {
    this._call = call;
  }
}

export class SupplyCompoundCall extends ethereum.Call {
  get inputs(): SupplyCompoundCall__Inputs {
    return new SupplyCompoundCall__Inputs(this);
  }

  get outputs(): SupplyCompoundCall__Outputs {
    return new SupplyCompoundCall__Outputs(this);
  }
}

export class SupplyCompoundCall__Inputs {
  _call: SupplyCompoundCall;

  constructor(call: SupplyCompoundCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyCompoundCall__Outputs {
  _call: SupplyCompoundCall;

  constructor(call: SupplyCompoundCall) {
    this._call = call;
  }
}

export class SupplyDydxCall extends ethereum.Call {
  get inputs(): SupplyDydxCall__Inputs {
    return new SupplyDydxCall__Inputs(this);
  }

  get outputs(): SupplyDydxCall__Outputs {
    return new SupplyDydxCall__Outputs(this);
  }
}

export class SupplyDydxCall__Inputs {
  _call: SupplyDydxCall;

  constructor(call: SupplyDydxCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyDydxCall__Outputs {
  _call: SupplyDydxCall;

  constructor(call: SupplyDydxCall) {
    this._call = call;
  }
}

export class SupplyFulcrumCall extends ethereum.Call {
  get inputs(): SupplyFulcrumCall__Inputs {
    return new SupplyFulcrumCall__Inputs(this);
  }

  get outputs(): SupplyFulcrumCall__Outputs {
    return new SupplyFulcrumCall__Outputs(this);
  }
}

export class SupplyFulcrumCall__Inputs {
  _call: SupplyFulcrumCall;

  constructor(call: SupplyFulcrumCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyFulcrumCall__Outputs {
  _call: SupplyFulcrumCall;

  constructor(call: SupplyFulcrumCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAaveCall extends ethereum.Call {
  get inputs(): WithdrawAaveCall__Inputs {
    return new WithdrawAaveCall__Inputs(this);
  }

  get outputs(): WithdrawAaveCall__Outputs {
    return new WithdrawAaveCall__Outputs(this);
  }
}

export class WithdrawAaveCall__Inputs {
  _call: WithdrawAaveCall;

  constructor(call: WithdrawAaveCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawAaveCall__Outputs {
  _call: WithdrawAaveCall;

  constructor(call: WithdrawAaveCall) {
    this._call = call;
  }
}

export class WithdrawDydxCall extends ethereum.Call {
  get inputs(): WithdrawDydxCall__Inputs {
    return new WithdrawDydxCall__Inputs(this);
  }

  get outputs(): WithdrawDydxCall__Outputs {
    return new WithdrawDydxCall__Outputs(this);
  }
}

export class WithdrawDydxCall__Inputs {
  _call: WithdrawDydxCall;

  constructor(call: WithdrawDydxCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawDydxCall__Outputs {
  _call: WithdrawDydxCall;

  constructor(call: WithdrawDydxCall) {
    this._call = call;
  }
}

export class WithdrawSomeCompoundCall extends ethereum.Call {
  get inputs(): WithdrawSomeCompoundCall__Inputs {
    return new WithdrawSomeCompoundCall__Inputs(this);
  }

  get outputs(): WithdrawSomeCompoundCall__Outputs {
    return new WithdrawSomeCompoundCall__Outputs(this);
  }
}

export class WithdrawSomeCompoundCall__Inputs {
  _call: WithdrawSomeCompoundCall;

  constructor(call: WithdrawSomeCompoundCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawSomeCompoundCall__Outputs {
  _call: WithdrawSomeCompoundCall;

  constructor(call: WithdrawSomeCompoundCall) {
    this._call = call;
  }
}

export class WithdrawSomeFulcrumCall extends ethereum.Call {
  get inputs(): WithdrawSomeFulcrumCall__Inputs {
    return new WithdrawSomeFulcrumCall__Inputs(this);
  }

  get outputs(): WithdrawSomeFulcrumCall__Outputs {
    return new WithdrawSomeFulcrumCall__Outputs(this);
  }
}

export class WithdrawSomeFulcrumCall__Inputs {
  _call: WithdrawSomeFulcrumCall;

  constructor(call: WithdrawSomeFulcrumCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawSomeFulcrumCall__Outputs {
  _call: WithdrawSomeFulcrumCall;

  constructor(call: WithdrawSomeFulcrumCall) {
    this._call = call;
  }
}
