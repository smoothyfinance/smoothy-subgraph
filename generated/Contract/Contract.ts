// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inAmounts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sTokenMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bTokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sTokenBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bTokenIdIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bTokenIdOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get inAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get outAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SwapAll extends ethereum.Event {
  get params(): SwapAll__Params {
    return new SwapAll__Params(this);
  }
}

export class SwapAll__Params {
  _event: SwapAll;

  constructor(event: SwapAll) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get inOutFlag(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sTokenMintedOrBurned(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__getTokenStatsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  _adminFeePct(): BigInt {
    let result = super.call("_adminFeePct", "_adminFeePct():(uint256)", []);

    return result[0].toBigInt();
  }

  try__adminFeePct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_adminFeePct", "_adminFeePct():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _adminInterestPct(): BigInt {
    let result = super.call(
      "_adminInterestPct",
      "_adminInterestPct():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__adminInterestPct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_adminInterestPct",
      "_adminInterestPct():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _ntokens(): BigInt {
    let result = super.call("_ntokens", "_ntokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try__ntokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_ntokens", "_ntokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _redeemFee(): BigInt {
    let result = super.call("_redeemFee", "_redeemFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try__redeemFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_redeemFee", "_redeemFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _rewardCollector(): Address {
    let result = super.call(
      "_rewardCollector",
      "_rewardCollector():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__rewardCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_rewardCollector",
      "_rewardCollector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _swapFee(): BigInt {
    let result = super.call("_swapFee", "_swapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try__swapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_swapFee", "_swapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tokenExist(param0: Address): BigInt {
    let result = super.call("_tokenExist", "_tokenExist(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try__tokenExist(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_tokenExist",
      "_tokenExist(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tokenInfos(param0: BigInt): BigInt {
    let result = super.call("_tokenInfos", "_tokenInfos(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try__tokenInfos(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_tokenInfos",
      "_tokenInfos(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalBalance(): BigInt {
    let result = super.call("_totalBalance", "_totalBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_totalBalance",
      "_totalBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _yBalances(param0: BigInt): BigInt {
    let result = super.call("_yBalances", "_yBalances(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try__yBalances(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_yBalances", "_yBalances(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _yTokenAddresses(param0: BigInt): Address {
    let result = super.call(
      "_yTokenAddresses",
      "_yTokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try__yTokenAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_yTokenAddresses",
      "_yTokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBalance(tid: BigInt): BigInt {
    let result = super.call("getBalance", "getBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tid)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(tid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBalance", "getBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMintAmount(bTokenIdx: BigInt, bTokenAmount: BigInt): BigInt {
    let result = super.call(
      "getMintAmount",
      "getMintAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bTokenIdx),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMintAmount(
    bTokenIdx: BigInt,
    bTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMintAmount",
      "getMintAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bTokenIdx),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedeemByLpTokenAmount(tid: BigInt, lpTokenAmount: BigInt): BigInt {
    let result = super.call(
      "getRedeemByLpTokenAmount",
      "getRedeemByLpTokenAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tid),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedeemByLpTokenAmount(
    tid: BigInt,
    lpTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedeemByLpTokenAmount",
      "getRedeemByLpTokenAmount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tid),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapAmount(
    bTokenIdxIn: BigInt,
    bTokenIdxOut: BigInt,
    bTokenInAmount: BigInt
  ): BigInt {
    let result = super.call(
      "getSwapAmount",
      "getSwapAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bTokenIdxIn),
        ethereum.Value.fromUnsignedBigInt(bTokenIdxOut),
        ethereum.Value.fromUnsignedBigInt(bTokenInAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSwapAmount(
    bTokenIdxIn: BigInt,
    bTokenIdxOut: BigInt,
    bTokenInAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapAmount",
      "getSwapAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(bTokenIdxIn),
        ethereum.Value.fromUnsignedBigInt(bTokenIdxOut),
        ethereum.Value.fromUnsignedBigInt(bTokenInAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenStats(bTokenIdx: BigInt): Contract__getTokenStatsResult {
    let result = super.call(
      "getTokenStats",
      "getTokenStats(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(bTokenIdx)]
    );

    return new Contract__getTokenStatsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getTokenStats(
    bTokenIdx: BigInt
  ): ethereum.CallResult<Contract__getTokenStatsResult> {
    let result = super.tryCall(
      "getTokenStats",
      "getTokenStats(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(bTokenIdx)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTokenStatsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokensCall extends ethereum.Call {
  get inputs(): AddTokensCall__Inputs {
    return new AddTokensCall__Inputs(this);
  }

  get outputs(): AddTokensCall__Outputs {
    return new AddTokensCall__Outputs(this);
  }
}

export class AddTokensCall__Inputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get yTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get decMultipliers(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get softWeights(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get hardWeights(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class AddTokensCall__Outputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }
}

export class AdjustWeightsCall extends ethereum.Call {
  get inputs(): AdjustWeightsCall__Inputs {
    return new AdjustWeightsCall__Inputs(this);
  }

  get outputs(): AdjustWeightsCall__Outputs {
    return new AdjustWeightsCall__Outputs(this);
  }
}

export class AdjustWeightsCall__Inputs {
  _call: AdjustWeightsCall;

  constructor(call: AdjustWeightsCall) {
    this._call = call;
  }

  get tid(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newSoftWeight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newHardWeight(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AdjustWeightsCall__Outputs {
  _call: AdjustWeightsCall;

  constructor(call: AdjustWeightsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeAdminFeePctCall extends ethereum.Call {
  get inputs(): ChangeAdminFeePctCall__Inputs {
    return new ChangeAdminFeePctCall__Inputs(this);
  }

  get outputs(): ChangeAdminFeePctCall__Outputs {
    return new ChangeAdminFeePctCall__Outputs(this);
  }
}

export class ChangeAdminFeePctCall__Inputs {
  _call: ChangeAdminFeePctCall;

  constructor(call: ChangeAdminFeePctCall) {
    this._call = call;
  }

  get pct(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeAdminFeePctCall__Outputs {
  _call: ChangeAdminFeePctCall;

  constructor(call: ChangeAdminFeePctCall) {
    this._call = call;
  }
}

export class ChangeAdminInterestPctCall extends ethereum.Call {
  get inputs(): ChangeAdminInterestPctCall__Inputs {
    return new ChangeAdminInterestPctCall__Inputs(this);
  }

  get outputs(): ChangeAdminInterestPctCall__Outputs {
    return new ChangeAdminInterestPctCall__Outputs(this);
  }
}

export class ChangeAdminInterestPctCall__Inputs {
  _call: ChangeAdminInterestPctCall;

  constructor(call: ChangeAdminInterestPctCall) {
    this._call = call;
  }

  get pct(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeAdminInterestPctCall__Outputs {
  _call: ChangeAdminInterestPctCall;

  constructor(call: ChangeAdminInterestPctCall) {
    this._call = call;
  }
}

export class ChangeRedeemFeeCall extends ethereum.Call {
  get inputs(): ChangeRedeemFeeCall__Inputs {
    return new ChangeRedeemFeeCall__Inputs(this);
  }

  get outputs(): ChangeRedeemFeeCall__Outputs {
    return new ChangeRedeemFeeCall__Outputs(this);
  }
}

export class ChangeRedeemFeeCall__Inputs {
  _call: ChangeRedeemFeeCall;

  constructor(call: ChangeRedeemFeeCall) {
    this._call = call;
  }

  get redeemFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeRedeemFeeCall__Outputs {
  _call: ChangeRedeemFeeCall;

  constructor(call: ChangeRedeemFeeCall) {
    this._call = call;
  }
}

export class ChangeRewardCollectorCall extends ethereum.Call {
  get inputs(): ChangeRewardCollectorCall__Inputs {
    return new ChangeRewardCollectorCall__Inputs(this);
  }

  get outputs(): ChangeRewardCollectorCall__Outputs {
    return new ChangeRewardCollectorCall__Outputs(this);
  }
}

export class ChangeRewardCollectorCall__Inputs {
  _call: ChangeRewardCollectorCall;

  constructor(call: ChangeRewardCollectorCall) {
    this._call = call;
  }

  get newCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRewardCollectorCall__Outputs {
  _call: ChangeRewardCollectorCall;

  constructor(call: ChangeRewardCollectorCall) {
    this._call = call;
  }
}

export class ChangeSwapFeeCall extends ethereum.Call {
  get inputs(): ChangeSwapFeeCall__Inputs {
    return new ChangeSwapFeeCall__Inputs(this);
  }

  get outputs(): ChangeSwapFeeCall__Outputs {
    return new ChangeSwapFeeCall__Outputs(this);
  }
}

export class ChangeSwapFeeCall__Inputs {
  _call: ChangeSwapFeeCall;

  constructor(call: ChangeSwapFeeCall) {
    this._call = call;
  }

  get swapFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeSwapFeeCall__Outputs {
  _call: ChangeSwapFeeCall;

  constructor(call: ChangeSwapFeeCall) {
    this._call = call;
  }
}

export class CollectRewardCall extends ethereum.Call {
  get inputs(): CollectRewardCall__Inputs {
    return new CollectRewardCall__Inputs(this);
  }

  get outputs(): CollectRewardCall__Outputs {
    return new CollectRewardCall__Outputs(this);
  }
}

export class CollectRewardCall__Inputs {
  _call: CollectRewardCall;

  constructor(call: CollectRewardCall) {
    this._call = call;
  }
}

export class CollectRewardCall__Outputs {
  _call: CollectRewardCall;

  constructor(call: CollectRewardCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get tid(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get bTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get bTokenIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lpTokenMintedMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }

  get flag(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RebalanceReserveCall extends ethereum.Call {
  get inputs(): RebalanceReserveCall__Inputs {
    return new RebalanceReserveCall__Inputs(this);
  }

  get outputs(): RebalanceReserveCall__Outputs {
    return new RebalanceReserveCall__Outputs(this);
  }
}

export class RebalanceReserveCall__Inputs {
  _call: RebalanceReserveCall;

  constructor(call: RebalanceReserveCall) {
    this._call = call;
  }

  get tid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RebalanceReserveCall__Outputs {
  _call: RebalanceReserveCall;

  constructor(call: RebalanceReserveCall) {
    this._call = call;
  }
}

export class RedeemByLpTokenCall extends ethereum.Call {
  get inputs(): RedeemByLpTokenCall__Inputs {
    return new RedeemByLpTokenCall__Inputs(this);
  }

  get outputs(): RedeemByLpTokenCall__Outputs {
    return new RedeemByLpTokenCall__Outputs(this);
  }
}

export class RedeemByLpTokenCall__Inputs {
  _call: RedeemByLpTokenCall;

  constructor(call: RedeemByLpTokenCall) {
    this._call = call;
  }

  get bTokenIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lpTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemByLpTokenCall__Outputs {
  _call: RedeemByLpTokenCall;

  constructor(call: RedeemByLpTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetYEnabledCall extends ethereum.Call {
  get inputs(): SetYEnabledCall__Inputs {
    return new SetYEnabledCall__Inputs(this);
  }

  get outputs(): SetYEnabledCall__Outputs {
    return new SetYEnabledCall__Outputs(this);
  }
}

export class SetYEnabledCall__Inputs {
  _call: SetYEnabledCall;

  constructor(call: SetYEnabledCall) {
    this._call = call;
  }

  get tid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get yAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetYEnabledCall__Outputs {
  _call: SetYEnabledCall;

  constructor(call: SetYEnabledCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get bTokenIdxIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bTokenIdxOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bTokenInAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get bTokenOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapAllCall extends ethereum.Call {
  get inputs(): SwapAllCall__Inputs {
    return new SwapAllCall__Inputs(this);
  }

  get outputs(): SwapAllCall__Outputs {
    return new SwapAllCall__Outputs(this);
  }
}

export class SwapAllCall__Inputs {
  _call: SwapAllCall;

  constructor(call: SwapAllCall) {
    this._call = call;
  }

  get inOutFlag(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lpTokenMintedMinOrBurnedMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SwapAllCall__Outputs {
  _call: SwapAllCall;

  constructor(call: SwapAllCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }

  get flag(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
